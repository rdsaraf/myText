{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","msg","Navbar","mode","href","title","id","onClick","changeMode","htmlFor","TextForm","showWords","numWord","ckeckMe","val","trim","split","join","length","useState","text","setText","setVal","style","color","heading","rows","placeholder","value","onChange","e","target","borderColor","upperCase","toUpperCase","showAlert","lowerCase","toLowerCase","trimText","removeSpace","beutyText","cpyText","document","getElementById","select","navigator","clipboard","writeText","showChars","scope","rowSpan","toFixed","About","backgroundColor","prototype","PropTypes","string","defaultProps","App","setAlert","setMode","body","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a4d894ea.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.type==='success'?props.alert.type:'warning'}!</strong> {props.alert.msg}\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\"><strong>{props.title}</strong></a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link \" aria-current=\"page\" href=\"#\">Information about app</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className={`form-check-input  btn btn-${props.mode==='light'?'dark':'light'}`} onClick={props.changeMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode==='light'?'Dark':'Light'} Mode</label>\r\n      </div>\r\n      </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\nNavbar.prototype = {\r\n    title : PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title : 'Rushi Saraf'\r\n};","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function TextForm(props) {\r\n    const clickMeUpper = ()=>{\r\n        let upperCase = val.toUpperCase();\r\n        setVal(upperCase);\r\n        val===\"\"?props.showAlert(\"Blank text, Please enter some text to perform task\",\"danger\"):props.showAlert(\"Text converted in uppercase\", \"success\");\r\n    }\r\n    const clickMeLower = ()=>{\r\n        let lowerCase = val.toLowerCase();\r\n        setVal(lowerCase);\r\n        val===\"\"?props.showAlert(\"Blank text, Please enter some text to perform task\",\"danger\"):props.showAlert(\"Text converted in lowercase\", \"success\");\r\n    }\r\n    const clickMeTrim = ()=>{\r\n        let trimText = val.trim();\r\n        setVal(trimText);\r\n        val===\"\"?props.showAlert(\"Blank text, Please enter some text to perform task\",\"danger\"):props.showAlert(\"Text trimmed\", \"success\");\r\n    }\r\n    const clickMeRemoveSpace = ()=>{\r\n        let removeSpace = val.split(/\\s/).join('');   \r\n        setVal(removeSpace);\r\n        val===\"\"?props.showAlert(\"Blank text, Please enter some text to perform task\",\"danger\"):props.showAlert(\"Spaces removed from text\", \"success\");\r\n    }\r\n    const clickMeCopy = ()=>{\r\n        let cpyText = document.getElementById('myText');\r\n        cpyText.select();\r\n        navigator.clipboard.writeText(cpyText.value);\r\n        val===\"\"?props.showAlert(\"Blank text, Please enter some text to perform task\",\"danger\"):props.showAlert(\"Text copied to your clipboard\", \"success\");\r\n    }\r\n    const clickMeClear = ()=>{\r\n        setVal(\"\");\r\n        val===\"\"?props.showAlert(\"Blank text, Please enter some text to perform task\",\"danger\"):props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n    const clickMeBeutify = ()=>{\r\n        let beutyText = val.split(/[ ]+/).join(\" \");   \r\n        setVal(beutyText);\r\n        val===\"\"?props.showAlert(\"Blank text, Please enter some text to perform task\",\"danger\"):props.showAlert(\"Text beutified\", \"success\");\r\n    }\r\n    const changeMe = (e)=>{\r\n        setVal(e.target.value);\r\n        setText(\"Enter text here...\");\r\n    }\r\n    const showWords = ()=>{\r\n        let numWord;\r\n        let ckeckMe = val.trim();\r\n        if(ckeckMe === \"\"){\r\n            numWord = 0;\r\n        }\r\n        else{\r\n            let beutyText = ckeckMe.split(/[ ]+/).join(\" \");\r\n            numWord = beutyText.split(' ').length;\r\n        }\r\n        return numWord;\r\n    }\r\n    const showChars = ()=>{\r\n        let numWord;\r\n        let ckeckMe = val.trim();\r\n        if(ckeckMe === \"\"){\r\n            numWord = 0;\r\n        }\r\n        else{\r\n            let beutyText = ckeckMe.split(/[ ]+/).join(\" \");\r\n            let finText = beutyText.split(/\\s/).join('')\r\n            numWord = finText.length;\r\n        }\r\n        return numWord;\r\n    }\r\n    const[text, setText] = useState(\"Enter text here...\");\r\n    const[val, setVal] = useState(\"\");\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='light'?'black':'cyan'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myText\" rows=\"9\" placeholder={text} value={val} onChange={changeMe} style={{borderColor:props.mode==='light'?'black':'cyan'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={clickMeUpper}>Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={clickMeLower}>Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={clickMeTrim}>Trim text</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={clickMeRemoveSpace}>Remove space</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={clickMeBeutify}>Beutify text</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={clickMeCopy}>Copy text</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={clickMeClear}>Clear text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='light'?'black':'cyan'}}>\r\n            <h2>Analysing your Text :</h2>\r\n            <hr />\r\n            <p>Your text contains {showWords()} words and {showChars()} characters</p>\r\n            <hr />\r\n            <p >Time required to read : <em>(*shows incorrect when you remove space)</em></p>\r\n            <table className={`table table-${props.mode==='light'?'light':'dark'} table-striped table-hover`} >\r\n                <thead>\r\n                    <tr>\r\n                    <th scope=\"col\"></th>\r\n                    <th scope=\"col\">Slow (125 wpm)</th>\r\n                    <th scope=\"col\">Average (300 wpm)</th>\r\n                    <th scope=\"col\">Fast (450 wpm)</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                    <th scope=\"row\" rowSpan=\"4\">Time </th>\r\n                    <td>{(0.008*showWords()).toFixed(4)} min</td>\r\n                    <td>{(0.0032*showWords()).toFixed(4)} min</td>\r\n                    <td>{(0.0024*showWords()).toFixed(4)} min</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <hr />\r\n        </div>\r\n        <div className=\"container\" style={{color:props.mode==='light'?'black':'cyan'}}>\r\n            <h3>Preview of entered text :</h3>\r\n            <p>{val.length>0?val:\"Nothing to show! Please enter some text above\"}</p>\r\n        </div>\r\n        <hr />\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.prototype = {\r\n    heading : PropTypes.string\r\n}\r\nTextForm.defaultProps = {\r\n    heading : 'Analyse your Text '\r\n}","import React from 'react'\r\n\r\nexport default function About(props) {\r\n    return (\r\n        <div className=\"container\" style={{color:props.mode==='light'?'black':'cyan'}}>\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"accordion my-3\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\" style={{borderColor:props.mode==='light'?'black':'cyan',backgroundColor:props.mode==='light'?'white':'black'}}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={{backgroundColor:props.mode==='light'?'white':'black',color:props.mode==='light'?'black':'cyan'}}>\r\n                            <strong>Text modifier</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\" >\r\n                        <div className=\"accordion-body\">\r\n                            <ol>\r\n                                <li><strong>Uppercase :</strong>Converts all characters from your text to uppercase.</li>\r\n                                <li><strong>Lowercase :</strong>Converts all characters from your text to lowercase.</li>\r\n                                <li><strong>Trim :</strong>Removes trailing white spaces from both front and back of your text.</li>\r\n                                <li><strong>Remove Space :</strong>Removes all white spaces from your text.</li>\r\n                                <li><strong>Copy text :</strong>Copies your text to your clipboard.</li>\r\n                                <li><strong>Clear text :</strong>Clears your text.</li>\r\n                                <li><strong>Beutify text :</strong>Removes unneccessary white spaces from your text and add only one white spaces between words.</li>\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={{borderColor:props.mode==='light'?'black':'cyan',backgroundColor:props.mode==='light'?'white':'black'}}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={{backgroundColor:props.mode==='light'?'white':'black',color:props.mode==='light'?'black':'cyan'}}>\r\n                        <strong>Text Analyser</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <ol>\r\n                                <li><strong>Word Count :</strong>Counts all Words from your text.</li>\r\n                                <li><strong>Character Count :</strong>Counts all characters from your text.</li>\r\n                                <li><strong>Reading time :</strong>Evaluatae time (tentative) required to read your text.(*NOTE : Inaccurate when you removes all spaces.)</li>\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={{borderColor:props.mode==='light'?'black':'cyan',backgroundColor:props.mode==='light'?'white':'black'}}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={{backgroundColor:props.mode==='light'?'white':'black',color:props.mode==='light'?'black':'cyan'}}>\r\n                        <strong>About theme</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <p><strong>Dark theme :</strong>You can change theme of application from light to dark.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React,{useState} from 'react'\nimport About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [alert, setAlert] = useState(null);\n  const [mode, setMode] = useState('light');\n  const changeMode = ()=>{\n    mode==='light'?setMode('dark'):setMode('light');\n    mode==='light'?document.body.style.backgroundColor='black':document.body.style.backgroundColor='white';\n  }\n  const showAlert = (msg, type)=>{\n    setAlert({\n      msg : msg,\n      type : type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title = \"myText.com\" mode={mode} changeMode={changeMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n        {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> */}\n            <TextForm heading=\"Enter Text :\" showAlert={showAlert} mode = {mode}/>\n            <About heading=\"About myText.com\" mode={mode}/>\n          {/* </Route>\n          <Route exact path=\"/\"> */}\n          {/* </Route>\n        </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}